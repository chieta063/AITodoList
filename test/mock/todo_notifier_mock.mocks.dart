// Mocks generated by Mockito 5.4.6 from annotations
// in ai_todo_list/test/mock/todo_notifier_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:ai_todo_list/models/todo.dart' as _i4;
import 'package:ai_todo_list/notifier/todo_notifier.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AutoDisposeNotifierProviderRef<T> {
  _FakeAutoDisposeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

/// A class which mocks [TodoNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoNotifierForTest extends _i1.Mock implements _i3.TodoNotifier {
  MockTodoNotifierForTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AutoDisposeNotifierProviderRef<List<_i4.Todo>> get ref =>
      (super.noSuchMethod(
            Invocation.getter(#ref),
            returnValue: _FakeAutoDisposeNotifierProviderRef_0<List<_i4.Todo>>(
              this,
              Invocation.getter(#ref),
            ),
          )
          as _i2.AutoDisposeNotifierProviderRef<List<_i4.Todo>>);

  @override
  List<_i4.Todo> get state =>
      (super.noSuchMethod(Invocation.getter(#state), returnValue: <_i4.Todo>[])
          as List<_i4.Todo>);

  @override
  set state(List<_i4.Todo>? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  List<_i4.Todo> build() =>
      (super.noSuchMethod(
            Invocation.method(#build, []),
            returnValue: <_i4.Todo>[],
          )
          as List<_i4.Todo>);

  @override
  void addTodo(String? title) => super.noSuchMethod(
    Invocation.method(#addTodo, [title]),
    returnValueForMissingStub: null,
  );

  @override
  void addTodoWithId(_i4.Todo? todo) => super.noSuchMethod(
    Invocation.method(#addTodoWithId, [todo]),
    returnValueForMissingStub: null,
  );

  @override
  void addTodoForTest(String? id, String? title, {bool? isCompleted = false}) =>
      super.noSuchMethod(
        Invocation.method(
          #addTodoForTest,
          [id, title],
          {#isCompleted: isCompleted},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleTodo(String? id) => super.noSuchMethod(
    Invocation.method(#toggleTodo, [id]),
    returnValueForMissingStub: null,
  );

  @override
  void deleteTodo(String? id) => super.noSuchMethod(
    Invocation.method(#deleteTodo, [id]),
    returnValueForMissingStub: null,
  );

  @override
  void listenSelf(
    void Function(List<_i4.Todo>?, List<_i4.Todo>)? listener, {
    void Function(Object, StackTrace)? onError,
  }) => super.noSuchMethod(
    Invocation.method(#listenSelf, [listener], {#onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  bool updateShouldNotify(List<_i4.Todo>? previous, List<_i4.Todo>? next) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [previous, next]),
            returnValue: false,
          )
          as bool);
}
